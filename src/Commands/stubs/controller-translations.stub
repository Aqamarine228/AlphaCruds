<?php

namespace $CLASS_NAMESPACE$;

use Illuminate\Http\Request;
use $MODEL_NAMESPACE$\$MODEL_NAME$;
use $MODEL_NAMESPACE$\Language;
use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;

class $CLASS$ extends \$BASE_CONTROLLER$
{
    public function index(Request $request): View
    {
        $$MODEL_CAMEL_NAME$s = $MODEL_NAME$::with(['translations' => static function ($query) use ($request) {
            $query->where('language_code', $request?->user()?->language_code)->orWhereNotNull('language_code');
        }])->paginate();
        return $this->view('$MODEL_CAMEL_NAME$.index', ['$MODEL_CAMEL_NAME$s' => $$MODEL_CAMEL_NAME$s]);
    }

    public function create(): View
    {
        return $this->view('$MODEL_CAMEL_NAME$.create');
    }

    public function show(Request $request, $MODEL_NAME$ $$MODEL_CAMEL_NAME$): View
    {
        $$MODEL_CAMEL_NAME$->load('translations', static function ($query) use ($request) {
            $query->where('language_code', $request?->user()?->language_code)->orWhereNotNull('language_code');
        });
        return $this->view('$MODEL_CAMEL_NAME$.show', ['$MODEL_CAMEL_NAME$' => $$MODEL_CAMEL_NAME$]);
    }

    public function edit(Request $request, $MODEL_NAME$ $$MODEL_CAMEL_NAME$): View
    {
        $$MODEL_CAMEL_NAME$->load('translations', static function ($query) use ($request) {
            $query->where('language_code', $request?->user()?->language_code)->orWhereNotNull('language_code');
        });
        $languages = Language::all();
        return $this->view('$MODEL_CAMEL_NAME$.edit', [
            '$MODEL_CAMEL_NAME$' => $$MODEL_CAMEL_NAME$,
            'languages' => $languages,
        ]);
    }

    public function store(\$REQUEST$ $request): RedirectResponse
    {
        $validated = $request->validated();
        $$MODEL_CAMEL_NAME$ = $MODEL_NAME$::create($validated);
        $language = Language::where('language_code', $validated['language_code'])->first();
        $$MODEL_CAMEL_NAME$->translations()->attach($language->id, $request->only($TRANSLATED_FIELDS$));

        $this->showSuccessMessage('$MODEL_NAME$ created successfully.');
        return redirect(route('$LOWER_NAME$.$MODEL_CAMEL_NAME$.show', $$MODEL_CAMEL_NAME$->id));
    }

    public function update(\$REQUEST$ $request, $MODEL_NAME$ $$MODEL_CAMEL_NAME$): RedirectResponse
    {
        $validated = $request->validated();
        $$MODEL_CAMEL_NAME$->update($validated);
        $this->showSuccessMessage('$MODEL_NAME$ updated successfully.');
        return redirect(route('$LOWER_NAME$.$MODEL_CAMEL_NAME$.show', $$MODEL_CAMEL_NAME$->id));
    }

    public function updateTranslatedFields(\$REQUEST$ $request, $MODEL_NAME$ $$MODEL_CAMEL_NAME$): RedirectResponse
    {
        $validated = $request->validated();
        $$MODEL_CAMEL_NAME$
            ->translations()
            ->where('language_code', $validated['language_code'])
            ->first()
            ->update($request->validated());
        $this->showSuccessMessage('$MODEL_NAME$ updated successfully.');
        return redirect(route('$LOWER_NAME$.$MODEL_CAMEL_NAME$.show', $$MODEL_CAMEL_NAME$->id));
    }

    public function destroy($MODEL_NAME$ $$MODEL_CAMEL_NAME$): RedirectResponse
    {
        $$MODEL_CAMEL_NAME$->delete();
        $this->showSuccessMessage('$MODEL_NAME$ deleted successfully.');
        return redirect(route('$LOWER_NAME$.$MODEL_CAMEL_NAME$.index'));
    }
}
