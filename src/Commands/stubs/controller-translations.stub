<?php

namespace $CLASS_NAMESPACE$;

use Illuminate\Http\Request;
use $MODEL_NAMESPACE$\$MODEL_NAME$;
use $MODEL_NAMESPACE$\Language;
use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;

class $CLASS$ extends \$BASE_CONTROLLER$
{
    public function index(Request $request): View
    {
        $$MODEL_PLURAL_NAME$ = $MODEL_NAME$::with(['translations' => static function ($query) {
            $query->select('code');
        }])->paginate();
        return $this->view('$MODEL_CAMEL_NAME$.index', ['$MODEL_PLURAL_NAME$' => $$MODEL_PLURAL_NAME$]);
    }

    public function show(Request $request, $MODEL_NAME$ $$MODEL_CAMEL_NAME$): View
    {
        $languageCode = $request->get('language_code', config('alphacruds.default_language'));

        $$MODEL_CAMEL_NAME$->load(['translations' => static function ($query) use ($languageCode) {
            $query->where('code', $languageCode);
        }]);

        if ($$MODEL_CAMEL_NAME$->translations->isEmpty()) {
            $$MODEL_CAMEL_NAME$->load(['translations' => static function ($query) {
                $query->whereNotNull('code');
            }]);
        }

        $languages = $$MODEL_CAMEL_NAME$->translations()->get();

        return $this->view('$MODEL_CAMEL_NAME$.show', [
            '$MODEL_CAMEL_NAME$' => $$MODEL_CAMEL_NAME$,
            'languages' => $languages,
        ]);
    }

    public function edit(Request $request, int $$MODEL_CAMEL_NAME$Id): View
    {
        $languageCode = $request->get('language_code', config('alphacruds.default_language'));

        $$MODEL_CAMEL_NAME$ = $MODEL_NAME$::find($$MODEL_CAMEL_NAME$Id);

        if ($$MODEL_CAMEL_NAME$) {
            $$MODEL_CAMEL_NAME$->load(['translations' => static function ($query) use ($languageCode) {
                    $query->where('code', $languageCode);
            }]);
        } else {
           $$MODEL_CAMEL_NAME$ = new $MODEL_NAME$;
        }

        $languages = Language::all();
        return $this->view('$MODEL_CAMEL_NAME$.edit', [
            '$MODEL_CAMEL_NAME$' => $$MODEL_CAMEL_NAME$,
            'languages' => $languages,
        ]);
    }

    public function store(): RedirectResponse
    {
        $$MODEL_CAMEL_NAME$ = $MODEL_NAME$::create([]);

        $this->showSuccessMessage('$MODEL_NAME$ created successfully.');
        return redirect(route('$LOWER_NAME$.$MODEL_CAMEL_NAME$.edit', $$MODEL_CAMEL_NAME$->id));
    }

    public function update(\$REQUEST$ $request, $MODEL_NAME$ $$MODEL_CAMEL_NAME$): RedirectResponse
    {
        $validated = $request->validated();
        $$MODEL_CAMEL_NAME$->update($validated);
        $this->showSuccessMessage('$MODEL_NAME$ updated successfully.');
        return redirect(route('$LOWER_NAME$.$MODEL_CAMEL_NAME$.show', $$MODEL_CAMEL_NAME$->id));
    }

    public function updateTranslatedFields(\$REQUEST$ $request, $MODEL_NAME$ $$MODEL_CAMEL_NAME$): RedirectResponse
    {
        $validated = $request->validated();
        $$MODEL_CAMEL_NAME$
            ->translations()
            ->syncWithoutDetaching([$validated['language_code'] => $request->only($TRANSLATED_FIELDS$)]);
        $this->showSuccessMessage('$MODEL_NAME$ updated successfully.');
        return redirect(route('$LOWER_NAME$.$MODEL_CAMEL_NAME$.show', $$MODEL_CAMEL_NAME$->id));
    }

    public function destroy($MODEL_NAME$ $$MODEL_CAMEL_NAME$): RedirectResponse
    {
        $$MODEL_CAMEL_NAME$->delete();
        $this->showSuccessMessage('$MODEL_NAME$ deleted successfully.');
        return redirect(route('$LOWER_NAME$.$MODEL_CAMEL_NAME$.index'));
    }
}
